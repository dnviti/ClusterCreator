- name: Deploy Argo CD
  hosts: controlplane[0]
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', '../../tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Add Argo CD Helm repository
      ansible.builtin.command:
        cmd: helm repo add argo https://argoproj.github.io/argo-helm

    - name: Update Helm repositories
      ansible.builtin.command:
        cmd: helm repo update

    - name: Check if ArgoCD is already installed
      ansible.builtin.command:
        cmd: helm status argocd -n argocd
      register: argocd_status
      changed_when: false
      ignore_errors: true

    - name: Create Argo CD namespace
      when: argocd_status.rc != 0
      kubernetes.core.k8s:
        name: argocd
        api_version: v1
        kind: Namespace
        state: present

    - name: Install Argo CD
      when: argocd_status.rc != 0
      ansible.builtin.command:
        cmd: >
          helm upgrade --install argocd argo/argo-cd
          --namespace argocd
          --set server.service.type=ClusterIP
          --set "configs.params.server\.insecure=true"

    - name: Wait for Argo CD deployments to be ready
      ansible.builtin.command:
        cmd: kubectl wait --for=condition=Available deployment --all -n argocd --timeout=5m
      changed_when: false

    - name: "Set default argocd_hostname if not provided"
      set_fact:
        argocd_hostname: "{{ cluster_config.gitops.argocd_hostname | default('argocd.' + cluster_config.cluster_name + '.' + cluster_config.networking.dns_search_domain, true) }}"
      when: cluster_config.gitops is defined and cluster_config.gitops.argocd_hostname is defined

    - name: Generate Argo CD Ingress Yaml
      ansible.builtin.template:
        src: ../../helpers/argocd-ingress.yaml.j2
        dest: "/tmp/argocd-ingress.yaml"
      vars:
        argocd_hostname: "argocd.{{ cluster_config.apps_domain }}"
      when:
        - cluster_config.ingress_controller in ['nginx', 'traefik']
        - cluster_config.gitops is defined
        - cluster_config.gitops.argocd_enabled

    - name: Create Argo CD Ingress
      ansible.builtin.command:
        cmd: kubectl apply -f /tmp/argocd-ingress.yaml
      when:
        - cluster_config.ingress_controller in ['nginx', 'traefik']
        - cluster_config.gitops is defined
        - cluster_config.gitops.argocd_enabled

    - name: Create ArgoCD Certificate
      when: cluster_config.cert_manager_enabled | default(false)
      block:
        - name: Generate ArgoCD Certificate Yaml
          ansible.builtin.template:
            src: ../../helpers/certificate.yaml.j2
            dest: "/tmp/argocd-certificate.yaml"
          vars:
            name: argocd-certificate
            namespace: argocd
            secret_name: argocd-server-tls
            issuer_name: custom-ca-issuer
            common_name: "argocd.{{ cluster_config.apps_domain }}"

        - name: Create ArgoCD Certificate
          ansible.builtin.command:
            cmd: kubectl apply -f /tmp/argocd-certificate.yaml
          changed_when: true

    - name: Wait for Argo CD initial admin secret to be created
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: argocd-initial-admin-secret
        namespace: argocd
      register: argocd_secret
      until: argocd_secret.resources | length > 0
      retries: 30
      delay: 10
      changed_when: false

    - name: Get initial Argo CD admin password
      ansible.builtin.shell:
        cmd: "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d"
      register: argocd_password
      changed_when: false

    - name: Display Argo CD initial admin password
      ansible.builtin.debug:
        msg: "Argo CD initial admin password: {{ argocd_password.stdout }}"
