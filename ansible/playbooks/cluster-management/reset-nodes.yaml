---
- name: Remove custom CA certificates
  hosts: all
  become: true
  gather_facts: true # Gathers ansible_os_family
  tasks:
    - name: Find certificate files in the local ssl/certificates directory
      ansible.builtin.find:
        paths: ../../../ssl/certificates
        patterns: "*.crt"
        file_type: file
      register: local_certs
      delegate_to: localhost

    - name: Find certificate files in the local ssl/authorities directory
      ansible.builtin.find:
        paths: ../../../ssl/authorities
        patterns: "*.crt"
        file_type: file
      register: local_authority_certs
      delegate_to: localhost
      ignore_errors: true

    - name: Combine certificate lists for removal
      set_fact:
        all_local_certs_to_remove: "{{ local_certs.files + (local_authority_certs.files | default([])) }}"

    - name: Set OS-specific certificate paths and commands
      ansible.builtin.set_fact:
        ca_path: >-
          {% if ansible_os_family in ["Debian", "Ubuntu", "Mint"] %}/usr/local/share/ca-certificates
          {% elif ansible_os_family in ["RedHat", "Rocky", "CentOS", "Fedora", "AlmaLinux", "OracleLinux", "Amazon"] %}/etc/pki/ca-trust/source/anchors
          {% elif ansible_os_family in ["Suse", "openSUSE"] %}/etc/pki/trust/anchors
          {% elif ansible_os_family == "Archlinux" %}/etc/ca-certificates/trust-source/anchors
          {% elif ansible_os_family == "Alpine" %}/usr/local/share/ca-certificates
          {% else %}/usr/local/share/ca-certificates
          {% endif %}
        ca_update_command: >-
          {% if ansible_os_family in ["Debian", "Ubuntu", "Mint", "Alpine"] %}update-ca-certificates
          {% elif ansible_os_family in ["RedHat", "Rocky", "CentOS", "Fedora", "AlmaLinux", "OracleLinux", "Amazon"] %}update-ca-trust
          {% elif ansible_os_family in ["Suse", "openSUSE"] %}update-ca-certificates
          {% elif ansible_os_family == "Archlinux" %}trust extract-compat
          {% else %}update-ca-certificates
          {% endif %}

    - name: Remove CA certificates from nodes
      ansible.builtin.file:
        path: "{{ ca_path }}/{{ item.path | basename }}"
        state: absent
      loop: "{{ all_local_certs_to_remove }}"
      when: all_local_certs_to_remove | length > 0
      register: remove_ca_result

    - name: Update CA certificate store on nodes after removal
      ansible.builtin.command:
        cmd: "{{ ca_update_command }}"
      when: remove_ca_result.changed

- name: Reset Node(s)
  hosts: all
  become: true
  vars:
    cluster_config: "{{ lookup('file', '../../tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tasks:
    - name: Run kubeadm reset
      ansible.builtin.command:
        cmd: kubeadm reset -f
      ignore_errors: yes

    - name: Flush iptables rules
      ansible.builtin.iptables:
        flush: yes

    - name: Delete all iptables chains
      ansible.builtin.shell: iptables -X
      ignore_errors: yes

    - name: Clear IPVS tables
      ansible.builtin.shell: ipvsadm --clear
      ignore_errors: yes

    - name: Unmount all storage and kubelet mounts
      ansible.builtin.shell: |
        mount | grep -E '(/var/lib/kubelet|/var/lib/rancher|/var/lib/longhorn|/opt/local-path-provisioner|/var/lib/rook)' | awk '{print $3}' | sort -r | xargs -r -n 1 umount -f -l
      ignore_errors: true

    - name: Delete k8s configurations
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/home/{{ cluster_config.ssh.ssh_user }}/.kube/"
        - "/home/{{ cluster_config.ssh.ssh_user }}/kubeadm-config.yaml"
        - "/home/{{ cluster_config.ssh.ssh_user }}/kubeadmcfg.yaml"
        - /etc/kubernetes
        - /etc/default/kubelet
        - /etc/ceph
        - /etc/cni/net.d/05-cilium.conf
        - /etc/cni/net.d/.kubernetes-cni-keep
        - /etc/systemd/system/kubelet.service.d/kubelet.conf
        - /etc/systemd/system/kubelet.service.d/20-etcd-service-manager.conf
        - /var/lib/etcd
        - /var/lib/kubelet
        - /var/backups/etcd
        - /var/lib/rook
        - /var/log/containers
        - /var/log/pods
        - /opt/local-path-provisioner
        - /opt/secrets/kubernetes.io
        - /run/lib/etcd
        - /root/.bootstrap

    - name: Delete all containers
      shell: "ctr -n k8s.io c rm $(ctr -n k8s.io c ls -q) 2>/dev/null || true"
      ignore_errors: true

    - name: Delete all container images
      shell: "ctr -n k8s.io i rm $(ctr -n k8s.io i ls -q) 2>/dev/null || true"
      ignore_errors: true

    - name: Find external storage disks to Zap
      # Zap all vd.* disks except for vda, which is the OS disk. All virtio disks start with vd.
      shell: "lsblk -lno NAME | grep -v vda | grep -E '^(vd.*)$' || true"
      register: disk_list

    - name: Show external disks that will be zapped
      ansible.builtin.debug:
        msg: "{{ disk_list.stdout_lines }}"
      when: disk_list.stdout_lines | length > 0

    - name: Zap external storage disks
      command: "sgdisk --zap-all /dev/{{ item }}"
      loop: "{{ disk_list.stdout_lines }}"
      when: disk_list.stdout_lines | length > 0
      ignore_errors: yes

    - name: Reboot nodes
      ansible.builtin.reboot:
        msg: "Rebooting to clean up after kubeadm reset"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
